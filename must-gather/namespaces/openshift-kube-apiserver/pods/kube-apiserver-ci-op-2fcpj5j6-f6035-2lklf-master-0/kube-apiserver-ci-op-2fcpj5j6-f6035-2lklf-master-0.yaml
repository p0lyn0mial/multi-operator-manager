---
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/default-container: kube-apiserver
    kubernetes.io/config.hash: 188503e150293a8e440a2ed9a88d5fc3
    kubernetes.io/config.mirror: 188503e150293a8e440a2ed9a88d5fc3
    kubernetes.io/config.seen: "2024-10-24T14:28:13.954437020Z"
    kubernetes.io/config.source: file
    target.workload.openshift.io/management: '{"effect": "PreferredDuringScheduling"}'
  creationTimestamp: "2024-10-24T14:29:37Z"
  labels:
    apiserver: "true"
    app: openshift-kube-apiserver
    revision: "17"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:annotations:
          .: {}
          f:kubectl.kubernetes.io/default-container: {}
          f:kubernetes.io/config.hash: {}
          f:kubernetes.io/config.mirror: {}
          f:kubernetes.io/config.seen: {}
          f:kubernetes.io/config.source: {}
          f:target.workload.openshift.io/management: {}
        f:labels:
          .: {}
          f:apiserver: {}
          f:app: {}
          f:revision: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"70cf08f3-a1d7-4bf2-aa24-f4dca7982067"}: {}
      f:spec:
        f:containers:
          k:{"name":"kube-apiserver"}:
            .: {}
            f:args: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"GOGC"}:
                .: {}
                f:name: {}
                f:value: {}
              k:{"name":"HOST_IP"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"POD_NAME"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"POD_NAMESPACE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"STATIC_POD_VERSION"}:
                .: {}
                f:name: {}
                f:value: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:livenessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":6443,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:privileged: {}
            f:startupProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-resources"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/var/log/kube-apiserver"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"kube-apiserver-cert-regeneration-controller"}:
            .: {}
            f:args: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"POD_NAMESPACE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-resources"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"kube-apiserver-cert-syncer"}:
            .: {}
            f:args: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"POD_NAME"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"POD_NAMESPACE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-resources"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"kube-apiserver-check-endpoints"}:
            .: {}
            f:args: {}
            f:command: {}
            f:env:
              .: {}
              k:{"name":"POD_NAME"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
              k:{"name":"POD_NAMESPACE"}:
                .: {}
                f:name: {}
                f:valueFrom:
                  .: {}
                  f:fieldRef: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:livenessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":17697,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:name: {}
                f:protocol: {}
            f:readinessProbe:
              .: {}
              f:failureThreshold: {}
              f:httpGet:
                .: {}
                f:path: {}
                f:port: {}
                f:scheme: {}
              f:initialDelaySeconds: {}
              f:periodSeconds: {}
              f:successThreshold: {}
              f:timeoutSeconds: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-certs"}:
                .: {}
                f:mountPath: {}
                f:name: {}
              k:{"mountPath":"/etc/kubernetes/static-pod-resources"}:
                .: {}
                f:mountPath: {}
                f:name: {}
          k:{"name":"kube-apiserver-insecure-readyz"}:
            .: {}
            f:args: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:ports:
              .: {}
              k:{"containerPort":6080,"protocol":"TCP"}:
                .: {}
                f:containerPort: {}
                f:hostPort: {}
                f:protocol: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:hostNetwork: {}
        f:initContainers:
          .: {}
          k:{"name":"setup"}:
            .: {}
            f:args: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources:
              .: {}
              f:requests:
                .: {}
                f:cpu: {}
                f:memory: {}
            f:securityContext:
              .: {}
              f:privileged: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
            f:volumeMounts:
              .: {}
              k:{"mountPath":"/var/log/kube-apiserver"}:
                .: {}
                f:mountPath: {}
                f:name: {}
        f:nodeName: {}
        f:priorityClassName: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:terminationGracePeriodSeconds: {}
        f:tolerations: {}
        f:volumes:
          .: {}
          k:{"name":"audit-dir"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"cert-dir"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
          k:{"name":"resource-dir"}:
            .: {}
            f:hostPath:
              .: {}
              f:path: {}
              f:type: {}
            f:name: {}
    manager: kubelet
    operation: Update
    time: "2024-10-24T14:29:37Z"
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          .: {}
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"PodReadyToStartContainers"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"PodScheduled"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:hostIPs: {}
        f:initContainerStatuses: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.0.0.3"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    subresource: status
    time: "2024-10-24T14:29:57Z"
  name: kube-apiserver-ci-op-2fcpj5j6-f6035-2lklf-master-0
  namespace: openshift-kube-apiserver
  ownerReferences:
  - apiVersion: v1
    controller: true
    kind: Node
    name: ci-op-2fcpj5j6-f6035-2lklf-master-0
    uid: 70cf08f3-a1d7-4bf2-aa24-f4dca7982067
  resourceVersion: "55396"
  uid: 39b749b8-2171-4a1b-87ad-1e3e4967679a
spec:
  containers:
  - args:
    - |
      LOCK=/var/log/kube-apiserver/.lock
      # We should be able to acquire the lock immediatelly. If not, it means the init container has not released it yet and kubelet or CRI-O started container prematurely.
      exec {LOCK_FD}>${LOCK} && flock --verbose -w 30 "${LOCK_FD}" || {
        echo "Failed to acquire lock for kube-apiserver. Please check setup container for details. This is likely kubelet or CRI-O bug."
        exit 1
      }
      if [ -f /etc/kubernetes/static-pod-certs/configmaps/trusted-ca-bundle/ca-bundle.crt ]; then
        echo "Copying system trust bundle ..."
        cp -f /etc/kubernetes/static-pod-certs/configmaps/trusted-ca-bundle/ca-bundle.crt /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
      fi

      exec watch-termination --termination-touch-file=/var/log/kube-apiserver/.terminating --termination-log-file=/var/log/kube-apiserver/termination.log --graceful-termination-duration=135s --kubeconfig=/etc/kubernetes/static-pod-resources/configmaps/kube-apiserver-cert-syncer-kubeconfig/kubeconfig -- hyperkube kube-apiserver --openshift-config=/etc/kubernetes/static-pod-resources/configmaps/config/config.yaml --advertise-address=${HOST_IP}  -v=2 --permit-address-sharing
    command:
    - /bin/bash
    - -ec
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: STATIC_POD_VERSION
      value: "17"
    - name: HOST_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.hostIP
    - name: GOGC
      value: "100"
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:ec5ef6dda3c256bf641cce01c338f9e7ef0e2bf8821e90809d4e18fdc6759989
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: livez?exclude=etcd
        port: 6443
        scheme: HTTPS
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    name: kube-apiserver
    ports:
    - containerPort: 6443
      hostPort: 6443
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: readyz
        port: 6443
        scheme: HTTPS
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 10
    resources:
      requests:
        cpu: 265m
        memory: 1Gi
    securityContext:
      privileged: true
    startupProbe:
      failureThreshold: 30
      httpGet:
        path: livez
        port: 6443
        scheme: HTTPS
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 10
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
    - mountPath: /var/log/kube-apiserver
      name: audit-dir
  - args:
    - --kubeconfig=/etc/kubernetes/static-pod-resources/configmaps/kube-apiserver-cert-syncer-kubeconfig/kubeconfig
    - --namespace=$(POD_NAMESPACE)
    - --destination-dir=/etc/kubernetes/static-pod-certs
    command:
    - cluster-kube-apiserver-operator
    - cert-syncer
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imagePullPolicy: IfNotPresent
    name: kube-apiserver-cert-syncer
    resources:
      requests:
        cpu: 5m
        memory: 50Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
  - args:
    - --kubeconfig=/etc/kubernetes/static-pod-resources/configmaps/kube-apiserver-cert-syncer-kubeconfig/kubeconfig
    - --namespace=$(POD_NAMESPACE)
    - -v=2
    command:
    - cluster-kube-apiserver-operator
    - cert-regeneration-controller
    env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imagePullPolicy: IfNotPresent
    name: kube-apiserver-cert-regeneration-controller
    resources:
      requests:
        cpu: 5m
        memory: 50Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
  - args:
    - --insecure-port=6080
    - --delegate-url=https://localhost:6443/readyz
    command:
    - cluster-kube-apiserver-operator
    - insecure-readyz
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imagePullPolicy: IfNotPresent
    name: kube-apiserver-insecure-readyz
    ports:
    - containerPort: 6080
      hostPort: 6080
      protocol: TCP
    resources:
      requests:
        cpu: 5m
        memory: 50Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
  - args:
    - --kubeconfig
    - /etc/kubernetes/static-pod-certs/configmaps/check-endpoints-kubeconfig/kubeconfig
    - --listen
    - 0.0.0.0:17697
    - --namespace
    - $(POD_NAMESPACE)
    - --v
    - "2"
    command:
    - cluster-kube-apiserver-operator
    - check-endpoints
    env:
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imagePullPolicy: IfNotPresent
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: healthz
        port: 17697
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    name: kube-apiserver-check-endpoints
    ports:
    - containerPort: 17697
      hostPort: 17697
      name: check-endpoints
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: healthz
        port: 17697
        scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 10
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  hostNetwork: true
  initContainers:
  - args:
    - |
      echo "Fixing audit permissions ..."
      chmod 0700 /var/log/kube-apiserver && touch /var/log/kube-apiserver/audit.log && chmod 0600 /var/log/kube-apiserver/*

      LOCK=/var/log/kube-apiserver/.lock
      echo "Acquiring exclusive lock ${LOCK} ..."

      # Waiting for 135s max for old kube-apiserver's watch-termination process to exit and remove the lock.
      # Two cases:
      # 1. if kubelet does not start the old and new in parallel (i.e. works as expected), the flock will always succeed without any time.
      # 2. if kubelet does overlap old and new pods for up to 130s, the flock will wait and immediate return when the old finishes.
      #
      # NOTE: We can increase 135s for a bigger expected overlap. But a higher value means less noise about the broken kubelet behaviour, i.e. we hide a bug.
      # NOTE: Do not tweak these timings without considering the livenessProbe initialDelaySeconds
      exec {LOCK_FD}>${LOCK} && flock --verbose -w 135 "${LOCK_FD}" || {
        echo "$(date -Iseconds -u) kubelet did not terminate old kube-apiserver before new one" >> /var/log/kube-apiserver/lock.log
        echo -n ": WARNING: kubelet did not terminate old kube-apiserver before new one."

        # We failed to acquire exclusive lock, which means there is old kube-apiserver running in system.
        # Since we utilize SO_REUSEPORT, we need to make sure the old kube-apiserver stopped listening.
        #
        # NOTE: This is a fallback for broken kubelet, if you observe this please report a bug.
        echo -n "Waiting for port 6443 to be released due to likely bug in kubelet or CRI-O "
        while [ -n "$(ss -Htan state listening '( sport = 6443 or sport = 6080 )')" ]; do
          echo -n "."
          sleep 1
          (( tries += 1 ))
          if [[ "${tries}" -gt 10 ]]; then
            echo "Timed out waiting for port :6443 and :6080 to be released, this is likely a bug in kubelet or CRI-O"
            exit 1
          fi
        done
        #  This is to make sure the server has terminated independently from the lock.
        #  After the port has been freed (requests can be pending and need 60s max).
        sleep 65
      }
      # We cannot hold the lock from the init container to the main container. We release it here. There is no risk, at this point we know we are safe.
      flock -u "${LOCK_FD}"
    command:
    - /usr/bin/timeout
    - "220"
    - /bin/bash
    - -ec
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:ec5ef6dda3c256bf641cce01c338f9e7ef0e2bf8821e90809d4e18fdc6759989
    imagePullPolicy: IfNotPresent
    name: setup
    resources:
      requests:
        cpu: 5m
        memory: 50Mi
    securityContext:
      privileged: true
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: FallbackToLogsOnError
    volumeMounts:
    - mountPath: /var/log/kube-apiserver
      name: audit-dir
  nodeName: ci-op-2fcpj5j6-f6035-2lklf-master-0
  preemptionPolicy: PreemptLowerPriority
  priority: 2000001000
  priorityClassName: system-node-critical
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  terminationGracePeriodSeconds: 135
  tolerations:
  - operator: Exists
  volumes:
  - hostPath:
      path: /etc/kubernetes/static-pod-resources/kube-apiserver-pod-17
      type: ""
    name: resource-dir
  - hostPath:
      path: /etc/kubernetes/static-pod-resources/kube-apiserver-certs
      type: ""
    name: cert-dir
  - hostPath:
      path: /var/log/kube-apiserver
      type: ""
    name: audit-dir
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2024-10-24T14:29:37Z"
    status: "True"
    type: PodReadyToStartContainers
  - lastProbeTime: null
    lastTransitionTime: "2024-10-24T14:29:37Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2024-10-24T14:29:57Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2024-10-24T14:29:57Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2024-10-24T13:33:01Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: cri-o://cd75d6452338335de352d80cda582cfe9c7e87379fa669b8f22b63851b9a9074
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:ec5ef6dda3c256bf641cce01c338f9e7ef0e2bf8821e90809d4e18fdc6759989
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:af59ac05c499b64063b6f47ce31238153b7da99f693fb6b80d6cc33f6e5c738e
    lastState: {}
    name: kube-apiserver
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-10-24T14:29:38Z"
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
    - mountPath: /var/log/kube-apiserver
      name: audit-dir
  - containerID: cri-o://ecb5b497e16607602af5072621551b8a783ccfb625bc56d10a9968eed05ba8d8
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:713792ab5294e6f10de883bfa9df2b328ae16cbe16da93df04075947d981e54c
    lastState: {}
    name: kube-apiserver-cert-regeneration-controller
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-10-24T14:29:38Z"
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
  - containerID: cri-o://0ecddf220d1c1a327ad239c51aa5dd8f076f2a3f19a7c2138436edd2756de181
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:713792ab5294e6f10de883bfa9df2b328ae16cbe16da93df04075947d981e54c
    lastState: {}
    name: kube-apiserver-cert-syncer
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-10-24T14:29:38Z"
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
  - containerID: cri-o://7db77a9a8c8c4f97ca08e33ac0cc1b6abd7d14d079cfeb81dfffd6a82ecb77af
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:713792ab5294e6f10de883bfa9df2b328ae16cbe16da93df04075947d981e54c
    lastState: {}
    name: kube-apiserver-check-endpoints
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-10-24T14:29:39Z"
    volumeMounts:
    - mountPath: /etc/kubernetes/static-pod-resources
      name: resource-dir
    - mountPath: /etc/kubernetes/static-pod-certs
      name: cert-dir
  - containerID: cri-o://0b1e99688f25fdf317094479fc123cdb57e94f40ed598d37570d6a494bbbf791
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:adc55330a214af3a57e2fac059ed409c2a7b1dc54d829a3ad1f719ce6c15ffa0
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:713792ab5294e6f10de883bfa9df2b328ae16cbe16da93df04075947d981e54c
    lastState: {}
    name: kube-apiserver-insecure-readyz
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2024-10-24T14:29:38Z"
  hostIP: 10.0.0.3
  hostIPs:
  - ip: 10.0.0.3
  initContainerStatuses:
  - containerID: cri-o://eeb5e9238185e696f29a1cbd49378a65c4afa7af2133cd7ef896daa2175a1a6c
    image: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:ec5ef6dda3c256bf641cce01c338f9e7ef0e2bf8821e90809d4e18fdc6759989
    imageID: registry.build02.ci.openshift.org/ci-op-2fcpj5j6/stable@sha256:af59ac05c499b64063b6f47ce31238153b7da99f693fb6b80d6cc33f6e5c738e
    lastState: {}
    name: setup
    ready: true
    restartCount: 0
    started: false
    state:
      terminated:
        containerID: cri-o://eeb5e9238185e696f29a1cbd49378a65c4afa7af2133cd7ef896daa2175a1a6c
        exitCode: 0
        finishedAt: "2024-10-24T14:29:37Z"
        reason: Completed
        startedAt: "2024-10-24T14:29:37Z"
    volumeMounts:
    - mountPath: /var/log/kube-apiserver
      name: audit-dir
  phase: Running
  podIP: 10.0.0.3
  podIPs:
  - ip: 10.0.0.3
  qosClass: Burstable
  startTime: "2024-10-24T13:33:01Z"
