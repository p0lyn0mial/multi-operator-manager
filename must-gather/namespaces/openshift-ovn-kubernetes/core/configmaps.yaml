---
apiVersion: v1
items:
- apiVersion: v1
  data:
    ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDMjCCAhqgAwIBAgIIOlelAZRIRJQwDQYJKoZIhvcNAQELBQAwNzESMBAGA1UE
      CxMJb3BlbnNoaWZ0MSEwHwYDVQQDExhrdWJlLWFwaXNlcnZlci1sYi1zaWduZXIw
      HhcNMjQxMDI0MTI0OTMyWhcNMzQxMDIyMTI0OTMyWjA3MRIwEAYDVQQLEwlvcGVu
      c2hpZnQxITAfBgNVBAMTGGt1YmUtYXBpc2VydmVyLWxiLXNpZ25lcjCCASIwDQYJ
      KoZIhvcNAQEBBQADggEPADCCAQoCggEBAOcnMnNp8mbJzP0YRtfP2eQLUaxDRCWh
      wLjXPeI+RJNc5XRTf8K7cnFvZM+VxeDvt3vvHmK+v6eeT2vM4sTe1Fi4y3+N+52E
      AZfAsx5jZkOLMqXmYCEtcM0iE5hCDlqj+iqz3+N9/h9r/wlkGcuLjFatvfYPe2aD
      orY3S/xWccWpBmPNNb6g+JgNbFkZtwSgP2rA0DgJQNm+SElSVXsOD4z6NJeQYUGS
      3S+3muL/R0tqHU6oqJUUS5i+SI0zUtGXSPF71/SZwp0ZzlqJOnF1+oKwvLwVYenJ
      1chzH2ooswTzIl2GbrriQiiFXcNatw5HPYAUj/u5mxc2UFdq0BS/kS8CAwEAAaNC
      MEAwDgYDVR0PAQH/BAQDAgKkMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFHl2
      38/JZPz+0k/JseyNGSSnxIWbMA0GCSqGSIb3DQEBCwUAA4IBAQCt/f91wvEf5yXB
      M6iVHyYS5quVkgKOyW/VlOiWBrC3nzumzbyKBKCCDVFV0ObFBUJ94uhYGCM32OLe
      kOF3g/sNMtjj+z8OWauQqQ8goczpC+NJb/ANaAtdFN+el5gLy13sXPsu8/gidAOb
      japZ7wk8Px33n/sQbsvM7eSuW3mWsEWCznXMAiXzkt4R2jLxYslFcqzAyjqYXOeI
      8hYcgmLVk5R2ZTKtgN6K0H1BRIPNPZ76GKjK0KpguzyRHJN8y6iD/Oe4779z0t1k
      sLOsY8mzi1bRHEV31Og7s6nFy42ECM5WZb/btqdJn2K/AQF3WCtdX6U9+rSuScOB
      5fOatgOb
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDQDCCAiigAwIBAgIIaxpuJ4b9n/wwDQYJKoZIhvcNAQELBQAwPjESMBAGA1UE
      CxMJb3BlbnNoaWZ0MSgwJgYDVQQDEx9rdWJlLWFwaXNlcnZlci1sb2NhbGhvc3Qt
      c2lnbmVyMB4XDTI0MTAyNDEyNDkzMVoXDTM0MTAyMjEyNDkzMVowPjESMBAGA1UE
      CxMJb3BlbnNoaWZ0MSgwJgYDVQQDEx9rdWJlLWFwaXNlcnZlci1sb2NhbGhvc3Qt
      c2lnbmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvCLC4H8c9qPx
      iqEgtyn9mblELDIJA//g3A6vuhVprmVxFKdR+SLdN7iuPXWJyNJoMujRpLh4O8Tx
      ynHOHASH3NZu20NBxPNwM7cM2YN35rYKMwgGMg6H/mFCyMnXo2wTbpG0kVbk1I+D
      pQDuCCd5Nwa8MyFMRmxC7FWSD/NXyJN96+TywP62d9UBwp8F2TV0IwEYJPp7QMBK
      TDef+8mWKaMjYpaTbDTh/ce6B6faSfliGhBqsKSWfUPBss/4nlWsDKOLagoDHQTt
      uFYyqXveH3lieKd0eu/mCUioLzq1GQ9oIdNHbqYf+zWB3hiJPwbxfRq01+NB+1Ga
      HtT4qKkLiQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUwAwEB
      /zAdBgNVHQ4EFgQUAoX0QNb/ygmPyFVnWrPc/3lKS+4wDQYJKoZIhvcNAQELBQAD
      ggEBAFnjav9JNB6NSH2HgOlj2mvqXSYOKmLD1c6WluJXOSh2YOE9iGDZJEpNGfx3
      sXdk3PKp9vheMdfBIWDme2H7ocJiPUl7HlzP0PvSl5f/9Jad3KEl5koJMxaobHMg
      86BT5Lg3TQ3H369Bw9yedYuw6Wakl8zGgYsHRdDiBsQFYheObHYcbWsZmsMM38uq
      8oXuysYM7Lvm1YceS5083X0W22yqnzIGsbclB6MaNO3GGOaUSM/jS+1ngse1nuFD
      X7ao+N0irLEUdy8/yoJe4/aV9tJlLqPJ+6tNTvLBU7I6pIo8lRqe79cMUXkfcdSB
      /jkfSdUQBBv/qdvCnP3Dz2dNsT4=
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDTDCCAjSgAwIBAgIINVjIWQIi1JIwDQYJKoZIhvcNAQELBQAwRDESMBAGA1UE
      CxMJb3BlbnNoaWZ0MS4wLAYDVQQDEyVrdWJlLWFwaXNlcnZlci1zZXJ2aWNlLW5l
      dHdvcmstc2lnbmVyMB4XDTI0MTAyNDEyNDkzMVoXDTM0MTAyMjEyNDkzMVowRDES
      MBAGA1UECxMJb3BlbnNoaWZ0MS4wLAYDVQQDEyVrdWJlLWFwaXNlcnZlci1zZXJ2
      aWNlLW5ldHdvcmstc2lnbmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC
      AQEAuZZryAJp0pIRsH8v0/cE4aX+NTYYQ/quEDW2uF9UuD18KBNm17UGUadohlFB
      8MZFqxyEUE3doAzNNNn+mlb1tdffMyrPCKuue/+uL283ESHexPCUipD2NZCJMLxP
      4cFBNY24XxsyCgP4GW0CLK6jzNDRUpmqAvuAtPaGpwoMmdHYEbiYfD+kQpeSEpe7
      65W04BdcW93RWcU8Pcq8mj5ryRy37PXOSKv6cD20zs3o3swhJQjXJ7S7HPNiIPJu
      WAIDXMTbmlE5oT7fawQUVEzZAMTxHwz386X+PnqivblZW10wCaew9ixkzgnBtyzR
      jInePtAOofQ+OAZRjfjK7tbwYQIDAQABo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD
      VR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUV9YpeGN1ZV9lrUjasKNrI8densowDQYJ
      KoZIhvcNAQELBQADggEBABWprtX9/Bmt/SDZMR++58OVDOHeN5IM5XmJTg1L9Y71
      wZ52OrAJTiHykyf0ZgdA1WFs4XCKRygK58Q0zh5TaN1Fbmt/ziKs6TfHpHr1EI9M
      8q5UN2en8KBnnkM5baV4pbs41Pj7LIzmuBdullsTzjWKz/+LiBYiUtEIViyLrAzS
      qmritaAg3r4ZguaL+KCWTRLpBJkmupaokwdo9rCJtY5qH70FaoNbdIofWE5Hi5Rx
      WZFOqIheZBTRD/bbhLUBCIgqacvwaIS0LDdHgPrpc5I0LUFZ/l4Te9TsY4sjYQQf
      OK4o1aud8IMYecdfB1khOkhpEQzsBcjTOyKTP0+zrq0=
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDlzCCAn+gAwIBAgIIFwQ1KsBW4yQwDQYJKoZIhvcNAQELBQAwWTFXMFUGA1UE
      AwxOb3BlbnNoaWZ0LWt1YmUtYXBpc2VydmVyLW9wZXJhdG9yX2xvY2FsaG9zdC1y
      ZWNvdmVyeS1zZXJ2aW5nLXNpZ25lckAxNzI5Nzc1MDExMB4XDTI0MTAyNDEzMDMz
      MFoXDTM0MTAyMjEzMDMzMVowWTFXMFUGA1UEAwxOb3BlbnNoaWZ0LWt1YmUtYXBp
      c2VydmVyLW9wZXJhdG9yX2xvY2FsaG9zdC1yZWNvdmVyeS1zZXJ2aW5nLXNpZ25l
      ckAxNzI5Nzc1MDExMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzml1
      SjsUKDZX7It4x6PImlu6eePhmNdUxp+1TGyUvU3BKiv/JsbyjYBOg3dip58nPBq9
      reTr4t3ZNnVMAbnaWmpwPR8sbkdjkoHETi0ipIPqEIQ47Yn2MHsY54AsXMcDS/3Z
      kVSbJhRPJaZq4+ZBZC0AGgDgAQd8bKyX1O2ybBp+/np/MoZB+3MTfKa77/2dqUDL
      y8mOG6V9/W7Z96Yvt+GJXSkTKaSD8ADbXIZ7MM7DFlMi3+s2paooWgpZIroZB08S
      rl8L6r22ncV/3CjlDm3KkoKHl1to1WdxKot8b8bSGC/tyc/zYBTc8lKek2BvdrK+
      meiC+ghVASGtHowSXQIDAQABo2MwYTAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/
      BAUwAwEB/zAdBgNVHQ4EFgQUmszbl4eL8cP9ms1ey+CdkVsPpeowHwYDVR0jBBgw
      FoAUmszbl4eL8cP9ms1ey+CdkVsPpeowDQYJKoZIhvcNAQELBQADggEBAJ2S6HTb
      3PyIvKsTvhCx3YPsRyZgL76ffg3oiYvyc+UnOkm8Qy0wwS2I0byXy+KOITmabJZQ
      6OdkkJB+h9CqWxuWPhmTmzVlP6/kJxRKUJutc7Qxxbv9mQ4MOGh1QmsYPaFwyajn
      fGz6OeVrYCGunB97m65sKBEcqAV7ECBM51aY8EYUQLb0w67g//YJPhWmPukm0gVa
      5KQ97kxl7dxuwrVr7VOeZMawHSQPUcN6kGhablM7MNRblC+dddiw+8uJX6q3xbYH
      mRgoGDhXTB4wj2bz5Zk7sFGt82QoUY+Tg2x8CBpZkNgJAGijwxrXy3dkRAoNJ1rg
      U1KCNil9uJyZHR8=
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDmzCCAoOgAwIBAgIIGVifAwvO2bwwDQYJKoZIhvcNAQELBQAwJjEkMCIGA1UE
      AwwbaW5ncmVzcy1vcGVyYXRvckAxNzI5Nzc1MTg0MB4XDTI0MTAyNDEzMDYyNVoX
      DTI2MTAyNDEzMDYyNlowPTE7MDkGA1UEAwwyKi5hcHBzLmNpLW9wLTJmY3BqNWo2
      LWY2MDM1LmdjcC0zLmNpLm9wZW5zaGlmdC5vcmcwggEiMA0GCSqGSIb3DQEBAQUA
      A4IBDwAwggEKAoIBAQC5lBc/sd7Gm0FTBzfdSyoBN8jwz3jgKfmoRokTrzKWv//t
      bnHmepkOL3q/ibK2FnCTvkcEqYTRdPtYzW7VMSo2V8kvKkPdgW5z7LrKP8bFq0qC
      R7YOSCcUJflYFfCvhEqgIiLN05U1hJMYw1meMH3Y3VBLAf83Nu+o9ktpjzTqTwBX
      aQjP7XDZs4Zw3mBYlknT4VgSmEY0BlwQtX2PNuoup3jC28SS6HfkC5Uws6o0EzoU
      xCb9EogTtzByEpTY25RorJhPr83v2gkY4GSRItNNU2WUz+IVFWQsZKy+3zcWZBVx
      kbwR3ymiAvd+sVkEl0rwcyEwhEgYbxnW0o25rUjjAgMBAAGjgbUwgbIwDgYDVR0P
      AQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAwGA1UdEwEB/wQCMAAwHQYD
      VR0OBBYEFB+MJoBnDQ7h918tfRvplOuBHN0qMB8GA1UdIwQYMBaAFNDcJhKdybkO
      CinYNyXbwuDtUgWTMD0GA1UdEQQ2MDSCMiouYXBwcy5jaS1vcC0yZmNwajVqNi1m
      NjAzNS5nY3AtMy5jaS5vcGVuc2hpZnQub3JnMA0GCSqGSIb3DQEBCwUAA4IBAQC9
      0ODyOuqGU56uqhdFQilwfnfAJsaKGgcE4LMILjSOLYU5afb2aje3K7UrAI8KGUoy
      Bn0O+9KVu/knkjtoWq7XLXPb8MpGSo1TPKSJFm9tjgdkgBnRIgBS8JXsPGF322fF
      O5mK5z7SEPfxvCTIG8yj3d3m4F/aIzg0/+VUXHMDof8pkC1yEYNiP7ij1ItPCbNQ
      fGw6Uq/7tvU+Sc/bVVbogPoD/WHJlywt1TEhI/K6Wil2RQZFC7WGQpqgIr6PSdHR
      RMjvQikEVrSzDNbCsb6FvJdabM/kKiI0HakvMqWqOfkeHUvpZ35xxgYi+6flQ4ln
      4XnZO6EssN3W8l8Hnf98
      -----END CERTIFICATE-----
      -----BEGIN CERTIFICATE-----
      MIIDDDCCAfSgAwIBAgIBATANBgkqhkiG9w0BAQsFADAmMSQwIgYDVQQDDBtpbmdy
      ZXNzLW9wZXJhdG9yQDE3Mjk3NzUxODQwHhcNMjQxMDI0MTMwNjIzWhcNMjYxMDI0
      MTMwNjI0WjAmMSQwIgYDVQQDDBtpbmdyZXNzLW9wZXJhdG9yQDE3Mjk3NzUxODQw
      ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDdActzMlPVmjtASy3hCJDs
      BWYHKHTYimlFhLYN9AkyiN/3VwqRk+hVzGFBCpkDigPAeF0yv5CKh9O5pB8lBOOD
      Aa7GwwuIztdTq8fQuHhzfvlo3+i8Nw78yJm1ar3uwxJKmaLFPi8TTaQCWRKpfS1j
      k9mMMj1uQVH0nJGeHGTPFbux9ZekXS3oEC8DD17rZKPM9TH7Q4mTy+Va4knoPlls
      FiNxPDnGLWGCdWFEFqoiEkzy868lleA0FyjXZHksjG+ih/l+89UBQh/Lx9Czsd2u
      kapMb/DhU9qMsfSner3JrxNEQopQisyNN4U3MVsCZSq3ZuhSCfVJeX82Lrx84IuH
      AgMBAAGjRTBDMA4GA1UdDwEB/wQEAwICpDASBgNVHRMBAf8ECDAGAQH/AgEAMB0G
      A1UdDgQWBBTQ3CYSncm5Dgop2Dcl28Lg7VIFkzANBgkqhkiG9w0BAQsFAAOCAQEA
      Iujqg0CbwLyhfAHo/FFqfv2mSlhkzZ7hqYNTlkzor2/Lvujh3CKb8rX1CgcA3mhX
      M1SofVaZap5cfP2wOlEOrhd7BtYzEcJR1AkhdQoSZBf66aSbFK6R3VJgdbh8upWz
      Mjyf1UaBmWmNQsnVG9P+0oQXUgMvMyPZO7nrMv7chDCF0NYLRqVeZg8eCHZ/D0BZ
      Jso6ceiATZzYr+Khqtc+to6O/x14q9o7hzL7WGAb6UeviigEBPRA+C/L7Wndu0EZ
      CDNWzot4v1sVEjJ12zEjtg7+DwubY4pmaVlOC/FpcNReGKbgnUczUS8ahZ20ziQd
      Qua4z9iRfzKlLRT0nSYXgQ==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: Contains a CA bundle that can be used to verify the
        kube-apiserver when using internal endpoints such as the internal service
        IP or kubernetes.default.svc. No other usage is guaranteed across distributions
        of Kubernetes clusters.
    creationTimestamp: "2024-10-24T13:02:21Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca.crt: {}
        f:metadata:
          f:annotations:
            .: {}
            f:kubernetes.io/description: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-10-24T13:26:35Z"
    name: kube-root-ca.crt
    namespace: openshift-ovn-kubernetes
    resourceVersion: "46443"
    uid: 28822a7b-3b33-438a-89d6-04b9698eb689
- apiVersion: v1
  data:
    service-ca.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDUTCCAjmgAwIBAgIIHiHBJtuE2jcwDQYJKoZIhvcNAQELBQAwNjE0MDIGA1UE
      Awwrb3BlbnNoaWZ0LXNlcnZpY2Utc2VydmluZy1zaWduZXJAMTcyOTc3NTAxMDAe
      Fw0yNDEwMjQxMzAzMjlaFw0yNjEyMjMxMzAzMzBaMDYxNDAyBgNVBAMMK29wZW5z
      aGlmdC1zZXJ2aWNlLXNlcnZpbmctc2lnbmVyQDE3Mjk3NzUwMTAwggEiMA0GCSqG
      SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCo00XB3nzEGJ810FA9CrMOIt0xIPY4dbg0
      4sHNtmamEeRZEH0xzzw3hp4U/gQ90ib8kKtIc0EI4ZWBzj1vVPDG3QVoPrHdwO3o
      WBbM8uhFIIzveL5djFbB+PQW030ItIjjVJ7o95ovy2NxC8giKa8JLiwQlWbrZ6T3
      lsf/VCj0XBGQSAjR9KP5gnZmcpSaTHBQoK879qDNaceKgq7nOD1Jluckdhq0sdXh
      A+8ecdvkWQB3/+qGWub28T3Tx3/+AgfJ7F9P87Fe68/g+K9/RjyJ906emk2yQudV
      EJ4ulhahIzPMkRFlAdLQw6qwEfC8ryglz8UcuC46uQiFzV5HMBN1AgMBAAGjYzBh
      MA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQv7Bex
      OGlNL8CZGeXb/qsaJqiFHDAfBgNVHSMEGDAWgBQv7BexOGlNL8CZGeXb/qsaJqiF
      HDANBgkqhkiG9w0BAQsFAAOCAQEABL8khIXbiXFv1MTEmYZwBZLpsR+h4JePYzeQ
      Bg2LgVWges+KOkxLh+QIav/KfN2Ya+FXPaB+SEs/mdI+cQhNGKdWdxeHBv8d1Ojb
      QGwwqLfFUlIZOwVjslhLXFCpeqqNq8O/rY01XpE30on1zc+tPlWze6623Qec0JrA
      TsVBd5Xa5HRH5AZmsvMkGIZxC8iNR6AOFXF8WGkEmHzgoJ0SC3VH6nLls5rep2Tl
      nTnj02kGZtXoFoLe7yycVWX+ZBXbnRD9VD70eL5AfMe6O5dQGvzDDsUlXK5DutBd
      +Pmi/3xf1d6JouI9XZ9qEGaTn3+vlc9/jaeMayijDt+l5FRR2Q==
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      service.beta.openshift.io/inject-cabundle: "true"
    creationTimestamp: "2024-10-24T13:02:21Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data: {}
        f:metadata:
          f:annotations:
            .: {}
            f:service.beta.openshift.io/inject-cabundle: {}
      manager: kube-controller-manager
      operation: Update
      time: "2024-10-24T13:02:21Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          f:service-ca.crt: {}
      manager: service-ca-operator
      operation: Update
      time: "2024-10-24T13:03:45Z"
    name: openshift-service-ca.crt
    namespace: openshift-ovn-kubernetes
    resourceVersion: "46444"
    uid: ad01e35c-8dc4-4010-89be-499ce3b0e720
- apiVersion: v1
  data:
    ca-bundle.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDTzCCAjegAwIBAgIIIwgzLWxaai8wDQYJKoZIhvcNAQELBQAwNTEzMDEGA1UE
      Awwqb3BlbnNoaWZ0LW92bi1rdWJlcm5ldGVzX292bi1jYUAxNzI5Nzc0OTQ1MB4X
      DTI0MTAyNDEzMDIyNVoXDTM0MTAyMjEzMDIyNlowNTEzMDEGA1UEAwwqb3BlbnNo
      aWZ0LW92bi1rdWJlcm5ldGVzX292bi1jYUAxNzI5Nzc0OTQ1MIIBIjANBgkqhkiG
      9w0BAQEFAAOCAQ8AMIIBCgKCAQEAshLbTDKSf2XWrRci7iHkK7oqGFwJawPXp9yt
      3y8FI6pgiVm3G2Sd06XqlfKyz5BEJbCbmsDx+BMc2mkHPApSSb+TASZ/F9zFwdY6
      lOoEqRjL4tWQGcRJ1pKzBXIQEw3V17mIAGC9Xumpsww8qz+tO2IHyH7YLW4ys5OC
      9YNf9i0QAeGFT2NVl/3HnJH79TRxgFeywhL/vDuSvckmd305aIHSbN+uNSs6ozMm
      KC+E582dW5qklQIRtIVnq2O/XIRlEeZ7cYKYyOYW4tbFINjfhEHLbjL5P/dWm/Jb
      kUlNDtmibIGQhO/CkC5fmoo5+XjXTIOa4pD+XqV9v1Ujm51wzQIDAQABo2MwYTAO
      BgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUSUQU1PhH
      IizhvGNVy4l9lUguHfowHwYDVR0jBBgwFoAUSUQU1PhHIizhvGNVy4l9lUguHfow
      DQYJKoZIhvcNAQELBQADggEBAE+mcLitdrb/GGXc7mwAPR2sTiF0MsFLUd9w99jp
      DtBxAIsYzlr0zjzAy1sxLZDgBfWWHbvSKdgD1qNhf8RFkP0AISdc1RzfKaM1NjQw
      ELsbs7NpcVP7nHc3NZHJc7ExkB1AX1XSdYgrQJaTEPB0hHGgj49GBXMRTZ8WSsc2
      WNidkyutMHjt0P1wdrDVdgjwm9cjnDBKnwGGUZBpIP7dUenNvdSebA9kjUyvQ+oJ
      J5JWvdKgN4FsLJdOvvCDUVQ7lwLBqKHIheZotuFUVjEUEDYyy2Awju7Km7SlfOHf
      9fhq2qrPltV7BBcNgaehAlulmOcObUg3K6TMuF2Vi1WnN50=
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      openshift.io/owning-component: Networking / cluster-network-operator
    creationTimestamp: "2024-10-24T13:02:26Z"
    labels:
      auth.openshift.io/managed-certificate-type: ca-bundle
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca-bundle.crt: {}
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/owning-component: {}
          f:labels:
            .: {}
            f:auth.openshift.io/managed-certificate-type: {}
      manager: network-operator
      operation: Update
      time: "2024-10-24T13:02:26Z"
    name: ovn-ca
    namespace: openshift-ovn-kubernetes
    resourceVersion: "46445"
    uid: 2976c2a9-416b-41bd-a122-b142344c4295
- apiVersion: v1
  data:
    ovnkube.conf: |-
      [default]
      mtu="1360"
      cluster-subnets="10.128.0.0/14/23"
      encap-port="6081"
      enable-lflow-cache=true
      lflow-cache-limit-kb=1048576
      enable-udp-aggregation=true

      [kubernetes]
      service-cidrs="172.30.0.0/16"
      ovn-config-namespace="openshift-ovn-kubernetes"
      apiserver="https://api-int.ci-op-2fcpj5j6-f6035.XXXXXXXXXXXXXXXXXXXXXX:6443"
      host-network-namespace="openshift-host-network"
      platform-type="GCP"
      healthz-bind-address="0.0.0.0:10256"
      dns-service-namespace="openshift-dns"
      dns-service-name="dns-default"

      [ovnkubernetesfeature]
      enable-egress-ip=true
      enable-egress-firewall=true
      enable-egress-qos=true
      enable-egress-service=true
      egressip-node-healthcheck-port=9107
      enable-multi-network=true
      enable-admin-network-policy=true
      enable-multi-external-gateway=true

      [gateway]
      mode=shared
      nodeport=true

      [logging]
      libovsdblogfile=/var/log/ovnkube/libovsdb.log
      logfile-maxsize=100
      logfile-maxbackups=5
      logfile-maxage=0
  kind: ConfigMap
  metadata:
    creationTimestamp: "2024-10-24T13:02:24Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          f:ovnkube.conf: {}
        f:metadata:
          f:ownerReferences:
            k:{"uid":"5fd09b98-1d3f-4b9a-a44c-e7d1a8665f5d"}: {}
      manager: cluster-network-operator/operconfig
      operation: Apply
      time: "2024-10-24T13:02:24Z"
    name: ovnkube-config
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: operator.openshift.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Network
      name: cluster
      uid: 5fd09b98-1d3f-4b9a-a44c-e7d1a8665f5d
    resourceVersion: "46446"
    uid: f44b2b2c-065f-453e-8fb2-ce05bd3adc3c
- apiVersion: v1
  data:
    ovnkube-lib.sh: "#!/bin/bash\nset -x\n# Add node-specific overrides if the container
      has mounted any\nK8S_NODE=${K8S_NODE:-}\nif [[ -n \"${K8S_NODE}\" && -f \"/env/${K8S_NODE}\"
      ]]; then\n  set -o allexport\n  source \"/env/${K8S_NODE}\"\n  set +o allexport\nfi\n\nnorthd_pidfile=\"/var/run/ovn/ovn-northd.pid\"\ncontroller_pidfile=\"/var/run/ovn/ovn-controller.pid\"\ncontroller_logfile=\"/var/log/ovn/acl-audit-log.log\"\nvswitch_dbsock=\"/var/run/openvswitch/db.sock\"\nnbdb_pidfile=\"/var/run/ovn/ovnnb_db.pid\"\nnbdb_sock=\"/var/run/ovn/ovnnb_db.sock\"\nnbdb_ctl=\"/var/run/ovn/ovnnb_db.ctl\"\nsbdb_pidfile=\"/var/run/ovn/ovnsb_db.pid\"\nsbdb_sock=\"/var/run/ovn/ovnsb_db.sock\"\nsbdb_ctl=\"/var/run/ovn/ovnsb_db.ctl\"\n\n#
      start-ovn-controller() starts ovn-controller and does not return until\n# ovn-controller
      exits\n#\n# Requires the following volume mounts:\n#   /run/openvswitch\n#   /run/ovn/\n#
      \  /etc/openvswitch\n#   /etc/ovn/\n#   /var/lib/openvswitch\n#   /var/log/ovn/\n#
      \  /dev/log\nstart-ovn-controller()\n{\n  local log_level=$1\n\n  if [[ $# -ne
      1 ]]; then\n    echo \"Expected one argument but got $#\"\n    exit 1\n  fi\n\n
      \ echo \"$(date -Iseconds) - starting ovn-controller\"\n  exec ovn-controller
      \\\n    unix:${vswitch_dbsock} \\\n    -vfile:off \\\n    --no-chdir \\\n    --pidfile=${controller_pidfile}
      \\\n    --syslog-method=\"null\" \\\n    --log-file=${controller_logfile} \\\n
      \   -vFACILITY:\"local0\" \\\n    -vconsole:\"${log_level}\" \\\n    -vconsole:\"acl_log:off\"
      \\\n    -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
      \   -vsyslog:\"acl_log:info\" \\\n    -vfile:\"acl_log:info\"\n}\n\n# quit-ovn-northd()
      will cleanly shut down ovn-northd. It is intended\n# to be run from a bash 'trap'
      like so:\n#\n#    trap quit-ovn-northd TERM INT\nquit-ovn-northd()\n{\n  echo
      \"$(date -Iseconds) - stopping ovn-northd\"\n  OVN_MANAGE_OVSDB=no /usr/share/ovn/scripts/ovn-ctl
      stop_northd\n  echo \"$(date -Iseconds) - ovn-northd stopped\"\n  rm -f ${northd_pidfile}\n
      \ exit 0\n}\n\n# run-ovn-northd() starts ovn-northd and does not return until\n#
      northd exits.\n#\n# Requires the following volume mounts:\n#   /etc/openvswitch/\n#
      \  /var/lib/openvswitch/\n#   /run/openvswitch/\n#   /run/ovn/\n#   /var/log/ovn/\nstart-ovn-northd()\n{\n
      \ local log_level=$1\n\n  if [[ $# -ne 1 ]]; then\n    echo \"Expected one argument
      but got $#\"\n    exit 1\n  fi\n\n  echo \"$(date -Iseconds) - starting ovn-northd\"\n
      \ exec ovn-northd \\\n    --no-chdir \\\n    -vconsole:\"${log_level}\" \\\n
      \   -vfile:off \\\n    -vPATTERN:console:\"%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\"
      \\\n    --pidfile ${northd_pidfile} \\\n    --n-threads=1 &\n  wait $!\n}\n\n#
      start-audit-log-rotation() continuously watches ovn-controller's audit\n# log
      directory and deletes old logs to ensure the total size of the logs\n# does
      not exceed a given threshold. This function does not return.\n#\n# Requires
      the following volume mounts:\n#   /var/log/ovn/\n#   /run/ovn/\nstart-audit-log-rotation()\n{\n
      \ # Rotate audit log files when then get to max size (in bytes)\n  MAXFILESIZE=$((
      \"50\"*1000000 ))\n  MAXLOGFILES=\"5\"\n  LOGDIR=$(dirname ${controller_logfile})\n\n
      \ # wait a bit for ovn-controller to start\n  local retries=0\n  while [[ 30
      -gt \"${retries}\" ]]; do\n    (( retries += 1 ))\n    CONTROLLERPID=$(cat ${controller_pidfile})\n
      \   if [[ -n \"${CONTROLLERPID}\" ]]; then\n      break\n    fi\n    sleep 2\n
      \ done\n  if [[ -z \"${CONTROLLERPID}\" ]]; then\n    echo \"Timed out waiting
      for ${controller_pidfile}\"\n    return 1\n  fi\n\n  # Redirect err to null
      so no messages are shown upon rotation\n  tail -F ${controller_logfile} 2> /dev/null
      &\n\n  while true\n  do\n    # Make sure ovn-controller's logfile exists, and
      get current size in bytes\n    if [ -f \"${controller_logfile}\" ]; then\n      file_size=`du
      -b ${controller_logfile} | tr -s '\\t' ' ' | cut -d' ' -f1`\n    else\n      ovs-appctl
      -t /var/run/ovn/ovn-controller.${CONTROLLERPID}.ctl vlog/reopen\n      file_size=`du
      -b ${controller_logfile} | tr -s '\\t' ' ' | cut -d' ' -f1`\n    fi\n\n    if
      [ $file_size -gt $MAXFILESIZE ];then\n      echo \"Rotating OVN ACL Log File\"\n
      \     timestamp=`date '+%Y-%m-%dT%H-%M-%S'`\n      mv ${controller_logfile}
      ${LOGDIR}/acl-audit-log.$timestamp.log\n      ovs-appctl -t /run/ovn/ovn-controller.${CONTROLLERPID}.ctl
      vlog/reopen\n      CONTROLLERPID=$(cat ${controller_pidfile})\n    fi\n\n    #
      Ensure total number of log files does not exceed the maximum configured from
      OVNPolicyAuditMaxLogFiles\n    num_files=$(ls -1 ${LOGDIR}/acl-audit-log* 2>/dev/null
      | wc -l)\n    if [ \"$num_files\" -gt \"$MAXLOGFILES\" ]; then\n      num_to_delete=$((
      num_files - ${MAXLOGFILES} ))\n      ls -1t ${LOGDIR}/acl-audit-log* 2>/dev/null
      | tail -$num_to_delete | xargs -I {} rm {}\n    fi\n\n    # sleep for 30 seconds
      to avoid wasting CPU\n    sleep 30\n  done\n}\n\nwait-for-certs()\n{\n  local
      detail=$1\n  local privkey=$2\n  local clientcert=$3\n\n  if [[ $# -ne 3 ]];
      then\n    echo \"Expected three arguments but got $#\"\n    exit 1\n  fi\n\n
      \ retries=0\n  TS=$(date +%s)\n  WARN_TS=$(( ${TS} + $(( 20 * 60)) ))\n  HAS_LOGGED_INFO=0\n
      \ while [[ ! -f \"${privkey}\" ||  ! -f \"${clientcert}\" ]] ; do\n    CUR_TS=$(date
      +%s)\n    if [[ \"${CUR_TS}\" -gt \"WARN_TS\"  ]]; then\n      echo \"$(date
      -Iseconds) WARN: ${detail} certs not mounted after 20 minutes.\"\n    elif [[
      \"${HAS_LOGGED_INFO}\" -eq 0 ]] ; then\n      echo \"$(date -Iseconds) INFO:
      ${detail} certs not mounted. Waiting one hour.\"\n      HAS_LOGGED_INFO=1\n
      \   fi\n    sleep 5\n  done\n}\n\n# start-rbac-proxy() starts the kube-rbac-proxy
      to expose ovnkube metrics to\n# Prometheus on the given listen_port, proxying
      from upstream_port. This\n# function does not return.\n#\n# Requires the following
      volume mounts:\n#   /etc/pki/tls/metrics-cert\nstart-rbac-proxy-node()\n{\n
      \ local detail=$1\n  local listen_port=$2\n  local upstream_port=$3\n  local
      privkey=$4\n  local clientcert=$5\n\n  if [[ $# -ne 5 ]]; then\n    echo \"Expected
      five arguments but got $#\"\n    exit 1\n  fi\n\n  # As the secret mount is
      optional we must wait for the files to be present.\n  # The service is created
      in monitor.yaml and this is created in sdn.yaml.\n  # If it isn't created there
      is probably an issue so we want to crashloop.\n  echo \"$(date -Iseconds) INFO:
      waiting for ${detail} certs to be mounted\"\n  wait-for-certs \"${detail}\"
      \"${privkey}\" \"${clientcert}\"\n\n  echo \"$(date -Iseconds) INFO: ${detail}
      certs mounted, starting kube-rbac-proxy\"\n  exec /usr/bin/kube-rbac-proxy \\\n
      \   --logtostderr \\\n    --secure-listen-address=:${listen_port} \\\n    --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      \\\n    --upstream=http://127.0.0.1:${upstream_port}/ \\\n    --tls-private-key-file=${privkey}
      \\\n    --tls-cert-file=${clientcert}\n}\n\n# quit-nbdb() will cleanly shut
      down the northbound dbserver. It is intended\n# to be run from a bash 'trap'
      like so:\n#\n#    trap quit-nbdb TERM INT\nquit-nbdb()\n{\n  echo \"$(date -Iseconds)
      - stopping nbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_nb_ovsdb\n  echo \"$(date
      -Iseconds) - nbdb stopped\"\n  rm -f ${nbdb_pidfile}\n  exit 0\n}\n\n# start-nbdb()
      starts the OVN northbound database. This function does not\n# return.\n#\n#
      Requires the following volume mounts:\n#   /etc/ovn\n#   /var/log/ovn\n#   /run/ovn/\nstart-nbdb()\n{\n
      \ local log_level=$1\n\n  if [[ $# -ne 1 ]]; then\n    echo \"Expected one argument
      but got $#\"\n    exit 1\n  fi\n\n  exec /usr/share/ovn/scripts/ovn-ctl \\\n
      \   --no-monitor \\\n    --db-nb-sock=${nbdb_sock} \\\n    --ovn-nb-log=\"-vconsole:${log_level}
      -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
      \   run_nb_ovsdb &\n  wait $!\n}\n\n# retry() an operation a number of times,
      sleeping 2 seconds between each try\nretry() {\n  local tries=${1}\n  local
      desc=${2}\n  local cmd=${3}\n\n  local retries=0\n  while ! ${cmd}; do\n    ((
      retries += 1 ))\n    if [[ \"${retries}\" -gt ${tries} ]]; then\n      echo
      \"$(date -Iseconds) - ERROR - ${desc} - too many failed attempts, giving up\"\n
      \     return 1\n    fi\n    echo \"$(date -Iseconds) - WARN - ${desc} - failed
      try ${retries}, retrying...\"\n    sleep 2\n  done\n  echo \"$(date -Iseconds)
      - INFO - ${desc} - success\"\n  return 0\n}\n\n# nbdb-post-start() tweaks nbdb
      database server settings and sets a number\n# of options in NB_Globals to configure
      OVN global settings\nnbdb-post-start()\n{\n  local northd_probe_interval=${1:-10000}\n\n
      \ rm -f ${nbdb_pidfile}\n\n  # set inactivity probe\n  if ! retry 60 \"inactivity-probe\"
      \"ovn-nbctl -t 5 --inactivity-probe=60000 set-connection punix:${nbdb_sock}\";
      then\n    exit 1\n  fi\n\n  # set IC zone\n  echo \"Setting the IC zone to ${K8S_NODE}\"\n
      \ IC_OPTION=\"name=\\\"${K8S_NODE}\\\" options:name=\\\"${K8S_NODE}\\\"\"\n\n
      \ # northd probe interval\n  echo \"Setting northd probe interval to ${northd_probe_interval}
      ms\"\n  NORTHD_PROBE_OPTION=\"options:northd_probe_interval=${northd_probe_interval}\"\n\n
      \ # let northd sleep so it takes less CPU\n  NORTHD_SLEEP_OPTION=\"options:northd-backoff-interval-ms=300\"\n\n
      \ local ipsec=false\n  local ipsec_encapsulation=false\n\n  IPSEC_OPTION=\"ipsec=${ipsec}
      options:ipsec_encapsulation=${ipsec_encapsulation}\"\n\n  # set all the NB_GLOBAL
      options\n  if ! retry 20 \"nb-global options\" \"ovn-nbctl -t 5 set nb_global
      . ${IC_OPTION} ${NORTHD_PROBE_OPTION} ${NORTHD_SLEEP_OPTION} ${IPSEC_OPTION}\";
      then\n    exit 1\n  fi\n}\n\n# ovndb-readiness-probe() checks if the the database
      is in the active state\n# and if not, exits with an error code.\novndb-readiness-probe()\n{\n
      \ # dbname should be 'sb' or 'nb'\n  local dbname=$1\n\n  if [[ $# -ne 1 ]];
      then\n    echo \"Expected one argument but got $#\"\n    exit 1\n  fi\n\n  local
      ctlfile\n  if [[ \"${dbname}\" = \"nb\" ]]; then\n    ctlfile=${nbdb_ctl}\n
      \ elif [[ \"${dbname}\" = \"sb\" ]]; then\n    ctlfile=${sbdb_ctl}\n  else\n
      \   echo \"unknown DB name ${dbname}\"\n    exit 1\n  fi\n\n  status=$(/usr/bin/ovn-appctl
      -t ${ctlfile} --timeout=3 ovsdb-server/sync-status  2>/dev/null | { grep \"state:
      active\" || false; })\n  if [[ -z \"${status}\" ]]; then\n    echo \"${dbname}
      DB is not running or active.\"\n    exit 1\n  fi\n}\n\n# quit-sbdb() will cleanly
      shut down the southbound dbserver. It is intended\n# to be run from a bash 'trap'
      like so:\n#\n#    trap quit-sbdb TERM INT\nquit-sbdb()\n{\n  echo \"$(date -Iseconds)
      - stopping sbdb\"\n  /usr/share/ovn/scripts/ovn-ctl stop_sb_ovsdb\n  echo \"$(date
      -Iseconds) - sbdb stopped\"\n  rm -f ${sbdb_pidfile}\n  exit 0\n}\n\n# start-sbdb()
      starts the OVN southbound database. This function does not\n# return.\n#\n#
      Requires the following volume mounts:\n#   /etc/ovn\n#   /var/log/ovn\n#   /run/ovn/\nstart-sbdb()\n{\n
      \ local log_level=$1\n\n  if [[ $# -ne 1 ]]; then\n    echo \"Expected one argument
      but got $#\"\n    exit 1\n  fi\n\n  exec /usr/share/ovn/scripts/ovn-ctl \\\n
      \   --no-monitor \\\n    --db-sb-sock=${sbdb_sock} \\\n    --ovn-sb-log=\"-vconsole:${log_level}
      -vfile:off -vPATTERN:console:%D{%Y-%m-%dT%H:%M:%S.###Z}|%05N|%c%T|%p|%m\" \\\n
      \   run_sb_ovsdb &\n  wait $!\n}\n\n# sbdb-post-start() tweaks sbdb database
      server settings\nsbdb-post-start()\n{\n  rm -f ${sbdb_pidfile}\n\n  # set inactivity
      probe\n  if ! retry 60 \"inactivity-probe\" \"ovn-sbctl -t 5 --inactivity-probe=180000
      set-connection punix:${sbdb_sock}\"; then\n    exit 1\n  fi\n}\n\nfunction log()\n{\n
      \   echo \"$(date --iso-8601=seconds) [{$1}] ${2}\"\n}\n\n# cni-bin-copy() detects
      the host OS and copies the correct shim binary to\n# the CNI binary directory.\n#\n#
      Requires the following volume mounts:\n#   /host\n#   /cni-bin-dir\ncni-bin-copy()\n{\n
      \ # collect host os information\n  . /host/etc/os-release\n  rhelmajor=\n  #
      detect which version we're using in order to copy the proper binaries\n  case
      \"${ID}\" in\n    rhcos|scos)\n      RHEL_VERSION=$(echo \"${CPE_NAME}\" | cut
      -f 5 -d :)\n      rhelmajor=$(echo $RHEL_VERSION | sed -E 's/([0-9]+)\\.{1}[0-9]+(\\.[0-9]+)?/\\1/')\n
      \   ;;\n    rhel) rhelmajor=$(echo \"${VERSION_ID}\" | cut -f 1 -d .)\n    ;;\n
      \   fedora)\n      if [ \"${VARIANT_ID}\" == \"coreos\" ]; then\n        rhelmajor=8\n
      \     else\n        log \"cnibincopy\" \"FATAL ERROR: Unsupported Fedora variant=${VARIANT_ID}\"\n
      \       exit 1\n      fi\n    ;;\n    *) log \"cnibincopy\" \"FATAL ERROR: Unsupported
      OS ID=${ID}\"; exit 1\n    ;;\n  esac\n\n  # Set which directory we'll copy
      from, detect if it exists\n  sourcedir=/usr/libexec/cni/\n  case \"${rhelmajor}\"
      in\n    8)\n      sourcedir=/usr/libexec/cni/rhel8\n    ;;\n    9)\n      sourcedir=/usr/libexec/cni/rhel9\n
      \   ;;\n    *)\n      log \"cnibincopy\" \"ERROR: RHEL Major Version Unsupported,
      rhelmajor=${rhelmajor}\"\n    ;;\n  esac\n\n  cp -f \"$sourcedir/ovn-k8s-cni-overlay\"
      /cni-bin-dir/\n}\n\n# start-ovnkube-node starts the ovnkube-node process. This
      function does not\n# return.\nstart-ovnkube-node()\n{\n  local log_level=$1\n
      \ local metrics_port=$2\n  local ovn_metrics_port=$3\n\n  if [[ $# -ne 3 ]];
      then\n    echo \"Expected three arguments but got $#\"\n    exit 1\n  fi\n\n
      \ # copy the right CNI shim for the host OS\n  cni-bin-copy\n\n  echo \"I$(date
      \"+%m%d %H:%M:%S.%N\") - disable conntrack on geneve port\"\n  iptables -t raw
      -A PREROUTING -p udp --dport 6081 -j NOTRACK\n  iptables -t raw -A OUTPUT -p
      udp --dport 6081 -j NOTRACK\n  ip6tables -t raw -A PREROUTING -p udp --dport
      6081 -j NOTRACK\n  ip6tables -t raw -A OUTPUT -p udp --dport 6081 -j NOTRACK\n\n
      \ echo \"I$(date \"+%m%d %H:%M:%S.%N\") - starting ovnkube-node\"\n\n  if [
      \"shared\" == \"shared\" ]; then\n    gateway_mode_flags=\"--gateway-mode shared
      --gateway-interface br-ex\"\n  elif [ \"shared\" == \"local\" ]; then\n    gateway_mode_flags=\"--gateway-mode
      local --gateway-interface br-ex\"\n  else\n    echo \"Invalid OVN_GATEWAY_MODE:
      \\\"shared\\\". Must be \\\"local\\\" or \\\"shared\\\".\"\n    exit 1\n  fi\n\n
      \ export_network_flows_flags=\n  if [[ -n \"${NETFLOW_COLLECTORS}\" ]] ; then\n
      \   export_network_flows_flags=\"--netflow-targets ${NETFLOW_COLLECTORS}\"\n
      \ fi\n  if [[ -n \"${SFLOW_COLLECTORS}\" ]] ; then\n    export_network_flows_flags=\"$export_network_flows_flags
      --sflow-targets ${SFLOW_COLLECTORS}\"\n  fi\n  if [[ -n \"${IPFIX_COLLECTORS}\"
      ]] ; then\n    export_network_flows_flags=\"$export_network_flows_flags --ipfix-targets
      ${IPFIX_COLLECTORS}\"\n  fi\n  if [[ -n \"${IPFIX_CACHE_MAX_FLOWS}\" ]] ; then\n
      \   export_network_flows_flags=\"$export_network_flows_flags --ipfix-cache-max-flows
      ${IPFIX_CACHE_MAX_FLOWS}\"\n  fi\n  if [[ -n \"${IPFIX_CACHE_ACTIVE_TIMEOUT}\"
      ]] ; then\n    export_network_flows_flags=\"$export_network_flows_flags --ipfix-cache-active-timeout
      ${IPFIX_CACHE_ACTIVE_TIMEOUT}\"\n  fi\n  if [[ -n \"${IPFIX_SAMPLING}\" ]] ;
      then\n    export_network_flows_flags=\"$export_network_flows_flags --ipfix-sampling
      ${IPFIX_SAMPLING}\"\n  fi\n  gw_interface_flag=\n  # if br-ex1 is configured
      on the node, we want to use it for external gateway traffic\n  if [ -d /sys/class/net/br-ex1
      ]; then\n    gw_interface_flag=\"--exgw-interface=br-ex1\"\n  fi\n\n  node_mgmt_port_netdev_flags=\n
      \ if [[ -n \"${OVNKUBE_NODE_MGMT_PORT_NETDEV}\" ]] ; then\n    node_mgmt_port_netdev_flags=\"--ovnkube-node-mgmt-port-netdev
      ${OVNKUBE_NODE_MGMT_PORT_NETDEV}\"\n  fi\n  if [[ -n \"${OVNKUBE_NODE_MGMT_PORT_DP_RESOURCE_NAME}\"
      ]] ; then\n    node_mgmt_port_netdev_flags=\"$node_mgmt_port_netdev_flags --ovnkube-node-mgmt-port-dp-resource-name
      ${OVNKUBE_NODE_MGMT_PORT_DP_RESOURCE_NAME}\"\n  fi\n\n  multi_network_enabled_flag=\n
      \ if [[ \"true\" == \"true\" ]]; then\n    multi_network_enabled_flag=\"--enable-multi-network\"\n
      \ fi\n\n  network_segmentation_enabled_flag=\n  if [[ \"false\" == \"true\"
      ]]; then\n    multi_network_enabled_flag=\"--enable-multi-network\"\n    network_segmentation_enabled_flag=\"--enable-network-segmentation\"\n
      \ fi\n\n  network_observability_enabled_flag=\n  if [[ \"false\" == \"true\"
      ]]; then\n    network_observability_enabled_flag=\"--enable-observability\"\n
      \ fi\n\n  multi_network_policy_enabled_flag=\n  if [[ \"false\" == \"true\"
      ]]; then\n    multi_network_policy_enabled_flag=\"--enable-multi-networkpolicy\"\n
      \ fi\n\n  admin_network_policy_enabled_flag=\n  if [[ \"true\" == \"true\" ]];
      then\n    admin_network_policy_enabled_flag=\"--enable-admin-network-policy\"\n
      \ fi\n\n  dns_name_resolver_enabled_flag=\n  if [[ \"false\" == \"true\" ]];
      then\n    dns_name_resolver_enabled_flag=\"--enable-dns-name-resolver\"\n  fi\n\n
      \ # If IP Forwarding mode is global set it in the host here. IPv6 IP Forwarding
      shuld be\n  # enabled for all interfaces at all times if cluster is configured
      as single stack IPv6\n  # or dual stack. This will be taken care by ovn-kubernetes(ovn-org/ovn-kubernetes#4376).\n
      \ # Setting net.ipv6.conf.all.forwarding to '0' when ipForwarding is Restricted
      to make \n  # sure IPv6 IP Forwarding is disabled when cluster is configured
      as single stack IPv4.\n  ip_forwarding_flag=\n  if [ \"\" == \"Global\" ]; then\n
      \   sysctl -w net.ipv4.ip_forward=1\n    sysctl -w net.ipv6.conf.all.forwarding=1\n
      \ else\n    ip_forwarding_flag=\"--disable-forwarding\"\n    sysctl -w net.ipv4.ip_forward=0\n
      \   sysctl -w net.ipv6.conf.all.forwarding=0\n  fi\n\n  NETWORK_NODE_IDENTITY_ENABLE=\n
      \ if [[ \"true\" == \"true\" ]]; then\n    NETWORK_NODE_IDENTITY_ENABLE=\"\n
      \     --bootstrap-kubeconfig=/var/lib/kubelet/kubeconfig\n      --cert-dir=/etc/ovn/ovnkube-node-certs\n
      \     --cert-duration=24h\n    \"\n  fi\n\n  ovn_v4_join_subnet_opt=\n  if [[
      \"\" != \"\" ]]; then\n    ovn_v4_join_subnet_opt=\"--gateway-v4-join-subnet
      \"\n  fi\n  ovn_v6_join_subnet_opt=\n  if [[ \"\" != \"\" ]]; then\n    ovn_v6_join_subnet_opt=\"--gateway-v6-join-subnet
      \"\n  fi\n\n  ovn_v4_masquerade_subnet_opt=\n  if [[ \"169.254.0.0/17\" != \"\"
      ]]; then\n    ovn_v4_masquerade_subnet_opt=\"--gateway-v4-masquerade-subnet
      169.254.0.0/17\"\n  fi\n  ovn_v6_masquerade_subnet_opt=\n  if [[ \"fd69::/112\"
      != \"\" ]]; then\n    ovn_v6_masquerade_subnet_opt=\"--gateway-v6-masquerade-subnet
      fd69::/112\"\n  fi\n\n  exec /usr/bin/ovnkube \\\n    --init-ovnkube-controller
      \"${K8S_NODE}\" \\\n    --init-node \"${K8S_NODE}\" \\\n    --config-file=/run/ovnkube-config/ovnkube.conf
      \\\n    --ovn-empty-lb-events \\\n    --loglevel \"${log_level}\" \\\n    --inactivity-probe=\"${OVN_CONTROLLER_INACTIVITY_PROBE}\"
      \\\n    ${gateway_mode_flags} \\\n    ${node_mgmt_port_netdev_flags} \\\n    --metrics-bind-address
      \"127.0.0.1:${metrics_port}\" \\\n    --ovn-metrics-bind-address \"127.0.0.1:${ovn_metrics_port}\"
      \\\n    --metrics-enable-pprof \\\n    --metrics-enable-config-duration \\\n
      \   --export-ovs-metrics \\\n    --disable-snat-multiple-gws \\\n    ${export_network_flows_flags}
      \\\n    ${multi_network_enabled_flag} \\\n    ${network_segmentation_enabled_flag}
      \\\n    ${multi_network_policy_enabled_flag} \\\n    ${admin_network_policy_enabled_flag}
      \\\n    ${dns_name_resolver_enabled_flag} \\\n    ${network_observability_enabled_flag}
      \\\n    --enable-multicast \\\n    --zone ${K8S_NODE} \\\n    --enable-interconnect
      \\\n    --acl-logging-rate-limit \"20\" \\\n    ${gw_interface_flag} \\\n    ${ip_forwarding_flag}
      \\\n    ${NETWORK_NODE_IDENTITY_ENABLE} \\\n    ${ovn_v4_join_subnet_opt} \\\n
      \   ${ovn_v6_join_subnet_opt} \\\n    ${ovn_v4_masquerade_subnet_opt} \\\n    ${ovn_v6_masquerade_subnet_opt}
      \n}"
  kind: ConfigMap
  metadata:
    annotations:
      kubernetes.io/description: |
        This is a script used by the ovn-kubernetes daemonset
      release.openshift.io/version: 4.18.0-0.ci.test-2024-10-24-124520-ci-op-2fcpj5j6-latest
    creationTimestamp: "2024-10-24T13:02:26Z"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          f:ovnkube-lib.sh: {}
        f:metadata:
          f:annotations:
            f:kubernetes.io/description: {}
            f:release.openshift.io/version: {}
          f:ownerReferences:
            k:{"uid":"5fd09b98-1d3f-4b9a-a44c-e7d1a8665f5d"}: {}
      manager: cluster-network-operator/operconfig
      operation: Apply
      time: "2024-10-24T13:02:52Z"
    name: ovnkube-script-lib
    namespace: openshift-ovn-kubernetes
    ownerReferences:
    - apiVersion: operator.openshift.io/v1
      blockOwnerDeletion: true
      controller: true
      kind: Network
      name: cluster
      uid: 5fd09b98-1d3f-4b9a-a44c-e7d1a8665f5d
    resourceVersion: "46447"
    uid: d98f9343-000e-46a9-bf98-0fda33993eea
- apiVersion: v1
  data:
    ca-bundle.crt: |
      -----BEGIN CERTIFICATE-----
      MIIDVTCCAj2gAwIBAgIISVWUYSe9TmswDQYJKoZIhvcNAQELBQAwODE2MDQGA1UE
      Awwtb3BlbnNoaWZ0LW92bi1rdWJlcm5ldGVzX3NpZ25lci1jYUAxNzI5Nzc0OTQ2
      MB4XDTI0MTAyNDEzMDIyNVoXDTM0MTAyMjEzMDIyNlowODE2MDQGA1UEAwwtb3Bl
      bnNoaWZ0LW92bi1rdWJlcm5ldGVzX3NpZ25lci1jYUAxNzI5Nzc0OTQ2MIIBIjAN
      BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3BoJJkp+BYbGMGW/tidwxdF53Uql
      ftB3yRNiIdpj329tSeYL2Q49CECvB2Jy+hhO92ytcZG7cjNHNg24lfqL1z9wbf1H
      jJnIsW4EcxuUo8dvMAdN+qDrQZ0bmdUvx1V7JkzUncKT8KJxR9MxXc9juRx4qgBn
      KGd2bC2TFDSjYOlQLWs03KxrjVOgc2HkC1vIHDgL98R0GE5fgvU/n7xfosYdiNtv
      iXzvupcinnGxzLOdPL7JhK/AoeZLUiTNtoHbZlvNqSN6XD9qhEnRBkHwAGDDG201
      oe2rkPD9NvWs5HZHpOCcrVzanCIrCBSBKExt57t7oxQxlT41YTNh4fu1DQIDAQAB
      o2MwYTAOBgNVHQ8BAf8EBAMCAqQwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU
      dsBd0HNoq5Z7D2amJSFlyA0S1NUwHwYDVR0jBBgwFoAUdsBd0HNoq5Z7D2amJSFl
      yA0S1NUwDQYJKoZIhvcNAQELBQADggEBAMP3AGiea+jZQUjkdvbewbjk6iIOogQt
      xcZ+aBiUae8uPW8VpURtN0zLJ2XiwjVl/pMB5TawRO2TCWGJdG+3owxzVxhQ/M28
      /7sCWQqT2WAjODHfbCsh4HBwS8OXn3RoBUSlS5GyhEq3ev4IpwzrbnolQlp1H3I9
      PrkEb7a+ByLPxi4v7xGTt95qAH0imHiffIS1/5xDo+uogGePsqY8Ly+azvvht8WL
      Zin+T2hJm0gUvaqBVD8FgfllPlE4CcYf/aUR7TnFFAMaL6elRmckNL6Zfw67TgpE
      lM7Hilb8tCuQxUmdKHgfwB01/ztzDNxG71xMgYCUG9vFRnAYkZdpIbg=
      -----END CERTIFICATE-----
  kind: ConfigMap
  metadata:
    annotations:
      openshift.io/owning-component: Networking / cluster-network-operator
    creationTimestamp: "2024-10-24T13:02:26Z"
    labels:
      auth.openshift.io/managed-certificate-type: ca-bundle
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:ca-bundle.crt: {}
        f:metadata:
          f:annotations:
            .: {}
            f:openshift.io/owning-component: {}
          f:labels:
            .: {}
            f:auth.openshift.io/managed-certificate-type: {}
      manager: network-operator
      operation: Update
      time: "2024-10-24T13:02:26Z"
    name: signer-ca
    namespace: openshift-ovn-kubernetes
    resourceVersion: "46448"
    uid: d1879012-8cb6-4c54-aacd-56f41750c8f9
kind: ConfigMapList
metadata:
  resourceVersion: "60984"
